# === Resonance.ai v12.5 Breakout Analytics ===
# Œî (percent_change): % price change from first to last candle
# W (band_width): volatility range = (high - low) / end_price * 100
# High Œî = trending strongly (potential breakout)
# High W = volatile (good for faster scalping)

from datetime import timedelta, datetime, timezone
import time
import requests
import json
from pathlib import Path
import os
import statistics

# ===== Alert display mode =====
# Default is Simple Mode - standard detection readout
SIMPLE_MODE = os.getenv("SIMPLE_MODE", "1") == "0"   # set SIMPLE_MODE=0 to enable Pro mode

# Absolute dollar-volume floor (quote currency per 1m candle).
# Can be overridden with a Railway env var: ABS_VOL_MIN_USD
ABSOLUTE_DOLLAR_VOLUME_MIN = float(os.getenv("ABS_VOL_MIN_USD", "2000"))

print(f"[Config] Absolute $/min volume floor = ${ABSOLUTE_DOLLAR_VOLUME_MIN:,.0f}")

SCRIPT_DIR = Path(__file__).resolve().parent
# [No file saving on mobile/cloud]

def load_coins_from_file(file_path="top50_usd_pairs.txt"):
    """Load coin pairs from the specified file."""
    try:
        with open(file_path, "r") as f:
            coins = [line.strip() for line in f if line.strip()]
        print(f"Loaded {len(coins)} coins from {file_path}")
        return coins
    except FileNotFoundError:
        print(f"Warning: {file_path} not found. Using fallback coin list.")
        return []
    except Exception as e:
        print(f"Error loading coins from {file_path}: {e}")
        return []

def log_coin_scan(symbol, change_1h=None, band_width=None, breakout_status=None):
    msg = f"[SKIPPED] {symbol} | "
    if change_1h is not None:
        msg += f"1H Œî: {change_1h:.3f}% | "
    if band_width is not None:
        msg += f"Band W: {band_width:.3f}% | "
    if breakout_status is not None:
        msg += f"Breakout: {'‚úî' if breakout_status else '‚úò'}"
    print(msg, flush=True)


# === CONFIGURATION === #
# Load coins from the file generated by top50coinsfetcher.py
COINS = load_coins_from_file("top50_usd_pairs.txt")

# Fallback list in case the file is not found or empty
if not COINS:
    print("Using fallback coin list...")
    COINS = [
        "BTC-USD", "ETH-USD", "SOL-USD", "ADA-USD", "AVAX-USD",
        "DOT-USD", "MATIC-USD", "LINK-USD", "UNI-USD", "ATOM-USD"
    ]

USDC_ONLY_COINS = []

DISCORD_WEBHOOK = "ADD YOUR DISCORD WEBHOOK HERE"

# === Breakout Scanner Parameters ===
CANDLE_INTERVAL = 60  # seconds

CANDLE_COUNT_FAST = 10
CANDLE_COUNT_MEDIUM = 15
CANDLE_COUNT_SLOW = 20

BREAKOUT_THRESHOLD_FAST = 0.013
BREAKOUT_THRESHOLD_MEDIUM = 0.018
BREAKOUT_THRESHOLD_SLOW = 0.024

VOLUME_SPIKE_RATIO_FAST = 1.3
VOLUME_SPIKE_RATIO_MEDIUM = 1.7
VOLUME_SPIKE_RATIO_SLOW = 2.2

lookback_candles = 10  # 6-8= jumpy 10-20= quiet  mode

BASE_URL = "https://api.exchange.coinbase.com"

def get_candles(product_id, granularity=CANDLE_INTERVAL):
    try:
        end = datetime.now(timezone.utc)
        start = end - timedelta(seconds=granularity * lookback_candles)

        url = f"{BASE_URL}/products/{product_id}/candles"
        params = {
            "granularity": granularity,
            "start": start.isoformat().replace("+00:00", "Z"),
            "end": end.isoformat().replace("+00:00", "Z"),
        }

        response = requests.get(url, params=params, timeout=10)
        if response.status_code != 200:
            print(f"‚ùå Error fetching candles for {product_id}: HTTP {response.status_code}", flush=True)
            return []

        data = response.json()
        if not isinstance(data, list) or not data:
            print(f"‚ö†Ô∏è API returned no/bad data for {product_id}: {data}", flush=True)
            return []

        data.sort(key=lambda c: c[0])
        return data
    except Exception as e:
        print(f"‚ùå Exception fetching candles for {product_id}: {e}", flush=True)
        return []

def send_discord_alert(pair, price, vol_info):
    data = {
        "content": f"üö® **BREAKOUT DETECTED** üö®\n**Pair**: `{pair}`\n**Price**: `${price:.8f}`\n**Vol Spike**: {vol_info}\n**Time**: {datetime.now(timezone.utc).strftime('%H:%M:%S UTC')}"
    }
    requests.post(DISCORD_WEBHOOK, json=data)

def is_breakout_band(cset, breakout_threshold, volume_spike_ratio):
    """
    Returns (hit: bool, info: dict)
    info includes: window, last_close, max_high, pct_over, last_vol, avg_vol, vol_ratio, usd_per_min
    """
    if len(cset) < 3:
        return False, None

    highs   = [c[2] for c in cset]
    closes  = [c[4] for c in cset]
    volumes = [c[5] for c in cset]

    if len(highs) < 2 or len(volumes) < 2:
        return False, None

    max_high    = max(highs[:-1])           # highest high before last candle
    last_close  = closes[-1]                # last close
    avg_vol     = statistics.mean(volumes[:-1])
    last_vol    = volumes[-1]
    usd_per_min = last_vol * last_close

    pct_over    = ((last_close / max_high) - 1.0) * 100 if max_high > 0 else 0.0
    vol_ratio   = (last_vol / avg_vol) if avg_vol > 0 else 0.0

    hit = (
        last_close > max_high * (1 + breakout_threshold) and
        last_vol   > avg_vol   * volume_spike_ratio and
        usd_per_min >= ABSOLUTE_DOLLAR_VOLUME_MIN
    )

    info = {
        "window": len(cset),
        "last_close": float(last_close),
        "max_high": float(max_high),
        "pct_over": float(pct_over),
        "last_vol": float(last_vol),
        "avg_vol": float(avg_vol),
        "vol_ratio": float(vol_ratio),
        "usd_per_min": float(usd_per_min),
    }
    return hit, info



from dataclasses import dataclass

@dataclass
class BandStats:
    over_max_pct: float
    vol: float
    avg_vol: float
    vol_mult: float
    dollars_per_min: float
    window: int

def stats_from_info(info: dict) -> "BandStats":
    """Convert legacy info dict to BandStats to avoid shared-state bugs and make formatting explicit."""
    if not info:
        return None
    return BandStats(
        over_max_pct=float(info.get("pct_over", 0.0)),
        vol=float(info.get("last_vol", 0.0)),
        avg_vol=float(info.get("avg_vol", 0.0)),
        vol_mult=float(info.get("vol_ratio", 0.0)),
        dollars_per_min=float(info.get("usd_per_min", 0.0)),
        window=int(info.get("window", 0)),
    )

from dataclasses import dataclass

@dataclass
class BandStats:
    over_max_pct: float
    vol: float
    avg_vol: float
    vol_mult: float
    dollars_per_min: float
    window: int

def stats_from_info(info: dict) -> "BandStats":
    """Convert legacy info dict to BandStats to avoid shared-state bugs and make formatting explicit."""
    if not info:
        return None
    return BandStats(
        over_max_pct=float(info.get("pct_over", 0.0)),
        vol=float(info.get("last_vol", 0.0)),
        avg_vol=float(info.get("avg_vol", 0.0)),
        vol_mult=float(info.get("vol_ratio", 0.0)),
        dollars_per_min=float(info.get("usd_per_min", 0.0)),
        window=int(info.get("window", 0)),
    )
def build_alert_message_simple(
    pair, price, percent_change, band_width, band_details, candle_interval_sec
):
    bands_str = ", ".join([bd["name"] for bd in band_details]) if band_details else "‚Äî"
    return "\n".join([
        "üö® **BREAKOUT DETECTED** üö®",
        f"**Pair**: `{pair}`",
        f"**Œî**: `{percent_change:.2f}%` | **W**: `{band_width:.2f}%`",
        f"**Bands**: {bands_str}",
        f"**Time**: {datetime.now(timezone.utc).strftime('%H:%M:%S UTC')}",
    ])


def build_alert_message_pro(
    pair, price, percent_change, band_width, band_details, candle_interval_sec
):
    
    lines = []
    lines.append("üö® **BREAKOUT DETECTED** üö®")
    lines.append(f"**Pair**: `{pair}`")
    lines.append(f"**Price**: `${price:.8f}`")
    lines.append(f"**Œî**: `{percent_change:.2f}%`  |  **W**: `{band_width:.2f}%`")
    lines.append(f"**Candle**: `{candle_interval_sec}s`")

    
    for bd in band_details:
        name = bd["name"]
        if "stats" in bd and bd["stats"] is not None:
            s = bd["stats"]
            lines.append(
                f"‚Ä¢ **{name}** (n={s.window}): "
                f"over max by `{s.over_max_pct:.2f}%`, "
                f"vol `{s.vol:.0f}` vs avg `{s.avg_vol:.0f}` "
                f"(x`{s.vol_mult:.2f}`), "
                f"`${s.dollars_per_min:,.0f}/min`"
            )
        else:
            info = bd["info"]
            lines.append(
                f"‚Ä¢ **{name}** (n={info['window']}): "
                f"over max by `{info['pct_over']:.2f}%`, "
                f"vol `{info['last_vol']:.0f}` vs avg `{info['avg_vol']:.0f}` "
                f"(x`{info['vol_ratio']:.2f}`), "
                f"`${info['usd_per_min']:,.0f}/min`"
            )
    lines.append(f"**Coinbase**: `https://www.coinbase.com/advanced-trade/spot/{pair}`")
    lines.append(f"**Time**: {datetime.now(timezone.utc).strftime('%H:%M:%S UTC')}")
    return "\n".join(lines)


def build_alert_message(
    pair, price, percent_change, band_width, band_details, candle_interval_sec
):
    if SIMPLE_MODE:
        return build_alert_message_simple(
            pair, price, percent_change, band_width, band_details, candle_interval_sec
        )
    else:
        return build_alert_message_pro(
            pair, price, percent_change, band_width, band_details, candle_interval_sec
        )


def send_discord_rich(message: str):
    try:
        requests.post(DISCORD_WEBHOOK, json={"content": message}, timeout=10)
    except Exception as e:
        print(f"‚ùå Failed to send Discord message: {e}", flush=True)


# === Main Loop === #
print("\n--- Resonance.ai Breakout Scanner Activated ---")
while True:
    for pair in COINS + USDC_ONLY_COINS:
        try:
            print(f"Scanning {pair}...")
            candles = get_candles(pair)

            if not candles:
                log_coin_scan(pair)
                continue

            start_price = candles[0][4]
            end_price = candles[-1][4]
            percent_change = ((end_price - start_price) / start_price) * 100

            highs = [c[2] for c in candles]
            lows = [c[3] for c in candles]
            band_width = (max(highs) - min(lows)) / end_price * 100

# --- Breakout detection (returns details) ---
            b1, i1 = is_breakout_band(candles[-CANDLE_COUNT_FAST:],   BREAKOUT_THRESHOLD_FAST,   VOLUME_SPIKE_RATIO_FAST)
            b2, i2 = is_breakout_band(candles[-CANDLE_COUNT_MEDIUM:], BREAKOUT_THRESHOLD_MEDIUM, VOLUME_SPIKE_RATIO_MEDIUM)
            b3, i3 = is_breakout_band(candles[-CANDLE_COUNT_SLOW:],   BREAKOUT_THRESHOLD_SLOW,   VOLUME_SPIKE_RATIO_SLOW)

            band_details = []
            if b1: band_details.append({"name": "FAST",   "stats": stats_from_info(i1)})
            if b2: band_details.append({"name": "MEDIUM", "stats": stats_from_info(i2)})
            if b3: band_details.append({"name": "SLOW",   "stats": stats_from_info(i3)})

            if band_details:
                print(
                    f"[SELECTED] {pair} | Œî: {percent_change:.2f}% | W: {band_width:.2f}% | "
                    f"Hits: {[bd['name'] for bd in band_details]}",
                    flush=True
                )
                msg = build_alert_message(
                    pair=pair,
                    price=end_price,
                    percent_change=percent_change,
                    band_width=band_width,
                    band_details=band_details,
                    candle_interval_sec=CANDLE_INTERVAL
                )
                send_discord_rich(msg)
            else:
                print(f"{pair} | Œî: {percent_change:.2f}% | W: {band_width:.2f}%")
                
        except Exception as e:
            print(f"Error processing {pair}: {e}")

    print("Sleeping 2 seconds...\n")
    time.sleep(2)
